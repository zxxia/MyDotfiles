set nocompatible    " Remove vi compatiblity

filetype off

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'Yggdroot/indentLine'
" Plug 'fatih/vim-go', {'for': 'go', 'do': ':GoUpdateBinaries'}
" Plug 'scrooloose/nerdtree'
Plug 'christoomey/vim-tmux-navigator'
Plug 'vim-airline/vim-airline'
Plug 'vim-python/python-syntax', {'for': 'python'}
Plug 'crusoexia/vim-monokai'
" Plug 'ludovicchabant/vim-gutentags'
Plug 'iamcco/markdown-preview.nvim', {'for': 'markdown', 'do': { -> mkdp#util#install() } }
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

if has('nvim') || has('patch-8.0.902')
  Plug 'mhinz/vim-signify'
else
  Plug 'mhinz/vim-signify', { 'tag': 'legacy' }
endif
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

" Plug 'jackguo380/vim-lsp-cxx-highlight'
Plug 'lervag/vimtex'
Plug 'pangloss/vim-javascript'
call plug#end()


""""""""""""""""""""""""""
" Settings native to vim "
""""""""""""""""""""""""""

filetype plugin indent on   " Use filetypes for indentation.
set autoindent              " Indent automatically
set expandtab               " Replace tabs with spaces
set tabstop=4               " Tabs are alligned to 4-space interval
set shiftwidth=4            " Tabs are 4 spaces.
set softtabstop=4
set number                  " Show line number
" set relativenumber
set cursorline              " Show a horizontal line on cursorline
set ruler                   " Show line #, column #
set fileformat=unix         " Unix file format
set encoding=UTF-8          " UTF-8 encoding
set mouse=a                 " Enable mouse in all editing mode
set selectmode=mouse        " Enable mouse input
set ignorecase              " Ignore case difference in search
set incsearch               " Incrementally search
set splitbelow              " More natural split opening, cursor in bottom window
set splitright              " More natural split opening, cursor in right window
let mapleader=' '           " Set space to leader key
set showcmd
set wildmenu                " Allow command menu for better command completion
set wildmode=longest:full,full
set pastetoggle=<F2>        " Press F2 to turn on paste mode
set hidden                  " When on a buffer becomes hidden when it is abandoned.
set hlsearch                " Highlight search results
set smartcase
set showmatch               " Show matching parentesis, brackets, and braces
set matchtime=2                   " Flash matching pair for 0.2 seconds.
set nowrap
set nobackup                " Do not create swap files
set noswapfile
set sidescroll=1
set scrolloff=5             " 5 lines offset between the cursor and top/bottom margin
set backspace=indent,eol,start " Allow backspace to delete to the line above
set completeopt=menu,menuone,noselect,noinsert
set undofile                " make undor available after closing files
set undodir=~/.vim/undodir
set colorcolumn=80          " Mark characters after line is longer than 80 characters.
set nostartofline
set autoread                " Reload files changed outside vim
set ttyfast
set termguicolors
set tags=./.tags;,.tags
set signcolumn=yes          " always show signcolumn
set updatetime=300
" Better display for messages
set cmdheight=2

highlight ColorColumn ctermbg=lightgrey guibg=white
syntax enable               " Syntax Highlight
" set background=light    "设置背景色"
" set t_Co=16
colorscheme monokai
" colorscheme default "solarized
if has("win32")
  "Windows options here
else
    if has("unix")
        let s:uname = system("uname")
        if s:uname == "Darwin\n"
            set clipboard=unnamed
            "Mac options here
        else
            " on linux(Ubuntu)
            set clipboard=unnamedplus
        endif
    endif
endif

" Trigger autoread when changing buffers or coming back to vim in terminal.
autocmd FocusGained,BufEnter * :silent! !

" Put these in an autocmd group, so that you can revert them with:
" ":augroup vimStartup | exe 'au!' | augroup END"
augroup vimStartup
  au!

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid, when inside an event handler
" (happens when dropping a file on gvim) and for a commit message (it's
" likely a different one than last time).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
    \ |   exe "normal! g`\""
    \ | endif

augroup END

" Auto-resize splits when Vim gets resized.
autocmd VimResized * wincmd =

" Remove trailing whitespace
if !exists("*StripTrailingWhitespace")
  function StripTrailingWhitespace()
    if !&binary && &filetype != 'diff' && &filetype != 'markdown' && &filetype != 'csv' && &filetype != 'txt'
      normal mz
      normal Hmy
      %s/\s\+$//e
      normal 'yz<CR>
      normal `z
    endif
  endfunction
endif

augroup stripTrailingSpace
    au!
    autocmd FileWritePre    * :call StripTrailingWhitespace()
    autocmd FileAppendPre   * :call StripTrailingWhitespace()
    autocmd FilterWritePre  * :call StripTrailingWhitespace()
    autocmd BufWritePre     * :call StripTrailingWhitespace()
augroup END


" Easier split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Consistent with C and D
nnoremap Y y$

" Easy navigation among tabs
nnoremap <Leader>h :bprevious<CR>
nnoremap <Leader>l :bnext<CR>

" Keep pane split when closing a buffer
nmap <silent> <leader>d :bp\|bd #<CR>

" Map :nohl backspace
nnoremap <expr> <BS> v:hlsearch?':noh<cr>':'<BS>'

" undo break points
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

"----------------------------------------------------------------------
" INSERT 模式下使用 EMACS 键位
"----------------------------------------------------------------------
inoremap <c-a> <home>
inoremap <c-e> <end>
inoremap <c-d> <del>
" inoremap <c-_> <c-k>

" command mode easy cursor movement
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" select the highlighted item when pop-up menu is visible in command mode
" taken from https://stackoverflow.com/questions/14842987/vim-wildmenu-move-into-subdirectory-with-a-different-key-than-down
let &wildcharm = &wildchar
cnoremap <expr> <CR> wildmenumode() ? "\<Down>" : "\<CR>"

" <Left> and <Right> to move the cursor instead of selecting a different match
cnoremap <Left> <Space><BS><Left>
cnoremap <Right> <Space><BS><Right>

" Keep cursor at the bottom of the visual selection after you yank it.
vnoremap y ygv<Esc>

" Keep visual mode after indent
vnoremap > >gv
vnoremap < <gv

" Prevent selecting and pasting from overwriting what you originally copied.
xnoremap p pgvy

" Escape terminal mode
tnoremap <leader><Esc> <C-\><C-n>

" let g:python3_host_prog = '/Users/zxxia/.virtualenvs/nvim/bin/python3.9'

""""""""""""""""""""""""""
" Settings of IndentLine "
""""""""""""""""""""""""""
let g:indentLine_char='┆'
let g:indentLine_color_term = 239
let g:indentLine_enabled = 1
let g:indentLine_fileTypeExclude = ['markdown', 'json', 'latex', 'tex', 'csv']

""""""""""""""""""""""""
" Settings of NERDTree "
""""""""""""""""""""""""
" open a NERDTree automatically when vim starts up
"autocmd vimenter * NERDTree
" close vim if the only window left open is a NERDTree
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" map <C-n> :NERDTreeToggle<CR>
" let g:NERDTreeWinSize=35
" let NERDTreeQuitOnOpen = 0
" " If another buffer tries to replace NERDTree, put in the other window, and bring back NERDTree.
" autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
"     \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
"

"""""""""""""""""""""""""""""
" Settings of python-syntax "
"""""""""""""""""""""""""""""
let g:python_highlight_all = 1


"""""""""""""""""""""""""
" settings of gutentags "
"""""""""""""""""""""""""
" Turn on error tracing
" let g:gutentags_trace = 0
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
" let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
" let g:gutentags_exclude_filetypes = ['csv', 'json', 'markdown']
" let g:gutentags_ctags_exclude = ["*.csv"]

" 所生成的数据文件的名称
" let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
" let s:vim_tags = expand('~/.cache/tags')
" let g:gutentags_cache_dir = s:vim_tags
" 检测 ~/.cache/tags 不存在就新建
" if !isdirectory(s:vim_tags)
   " silent! call mkdir(s:vim_tags, 'p')
" endif

" 配置 ctags 的参数
" let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extras=+q']
" let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
" let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
" let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
" set statusline+=%{gutentags#statusline()}

" c++ syntax highlighting
" let g:cpp_class_scope_highlight = 1
" let g:cpp_member_variable_highlight = 1
" let g:cpp_class_decl_highlight = 1
